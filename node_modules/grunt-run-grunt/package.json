{
  "name": "grunt-run-grunt",
  "description": "Grunt task to run Gruntfiles in a child process. Gruntception!",
  "version": "0.1.4",
  "homepage": "https://github.com/Bartvds/grunt-run-grunt",
  "author": {
    "name": "Bart van der Schoor",
    "url": "https://github.com/Bartvds"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Bartvds/grunt-run-grunt"
  },
  "bugs": {
    "url": "https://github.com/Bartvds/grunt-run-grunt/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Bartvds/grunt-run-grunt/blob/master/LICENSE-MIT"
    }
  ],
  "keywords": [
    "gruntplugin",
    "gruntfile",
    "grunt-cli",
    "spawn",
    "grunt",
    "run"
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">=0.8.0 <0.11.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "jshint-path-reporter": "~0.1",
    "mocha-unfunk-reporter": "~0.2.0",
    "grunt": "~0.4.2",
    "grunt-cli": "0.1",
    "grunt-bump": "0.0.11",
    "grunt-mocha-test": "~0.6.2",
    "chai": "~1.7.2",
    "chai-fs": "0.0.1",
    "mkdirp": "~0.3.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "lodash": "2.4.1"
  },
  "readme": "# grunt-run-grunt\r\n\r\n[![Build Status](https://secure.travis-ci.org/Bartvds/grunt-run-grunt.png?branch=master)](http://travis-ci.org/Bartvds/grunt-run-grunt) [![Dependency Status](https://gemnasium.com/Bartvds/grunt-run-grunt.png)](https://gemnasium.com/Bartvds/grunt-run-grunt) [![NPM version](https://badge.fury.io/js/grunt-run-grunt.png)](http://badge.fury.io/js/grunt-run-grunt)\r\n\r\n> Grunt task to run Gruntfiles in a child process. Gruntception!\r\n\r\nConsole output capture is not reliable on Windows as Node.js there doesn't always flush buffers before exiting. Until this is fixed Windows users should use the Vagrantfile instead (see below). :bangbang:\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-run-grunt --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-run-grunt');\r\n```\r\n\r\n## The \"run_grunt\" task\r\n\r\n> *\"Yo dawg! I herd you like grunt, so I put some grunt in your grunt so you can grunt while you grunt.\"* :laughing:\r\n\r\nUse the `run_grunt` task to spawn new processes that run `grunt-cli` and optionally do work on the result data. It will use the global `$ grunt` command, just like when you'd run grunt manually.\r\n\r\nMain use-case is testing your gruntfile or grunt-plugins, but it is also suited for creative use of gruntfiles and grunt-cli output. \r\n\r\nFor example use it to verify the final output of various reporters and formatters. Alternately parse the output of the \"$grunt --help\" command and work with the list of tasks and aliases (without instrumenting the gruntfile in any way).\r\n\r\nIf you need something similar to run grunt in a production build environment or don't really care about the content of the cli output then you are probably looking for [grunt-hub](https://github.com/shama/grunt-hub) instead. If you need to run tasks from one Gruntfile concurrently use [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent) or [grunt-parallel](https://github.com/iammerrick/grunt-parallel).\r\n\r\nIn the future there will also be a way to use this as a standard Node.js module, so you can run grunt from inside standard scripts. *Why?* Who knows?\r\n\r\n### Usage\r\n\r\nIn your project's Gruntfile, add a section named `run_grunt` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n\trun_grunt: {\r\n\t\toptions: {\r\n\t\t\tminimumFiles: 2\r\n\t\t},\r\n\t\tsimple_target: {\r\n\t\t\toptions: {\r\n\t\t\t\tlog: false,\r\n\t\t\t\tprocess: function(res){\r\n\t\t\t\t\tif (res.fail){\r\n\t\t\t\t\t\tres.output = 'new content'\r\n\t\t\t\t\t\tgrunt.log.writeln('bork bork');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tsrc: ['Gruntfile.js', 'other/Gruntfile.js']\r\n\t\t},\r\n\t},\r\n})\r\n```\r\n### Options\r\n\r\n#### grunt-cli options \r\n\r\n```\r\nhelp: boolean,\r\nbase: 'string',\r\n'no-color': boolean,\r\ndebug: boolean,\r\nstack: boolean,\r\nforce: boolean,\r\ntasks: boolean,\r\nnpm: 'string',\r\n'no-write': boolean,\r\nverbose: boolean,\r\nversion: boolean\r\n```\r\n\r\n#### Custom options\r\n```\r\n// pass the tasks to run: either a string or array-of-strings\r\ntask: ['clean', 'jshint:strictTarget', 'mocha:subTarget']\r\n\r\n// process the result data object\r\nprocess: function(result){\r\n\t// see below for result structure\r\n},\r\n\r\n// log child console output\r\nlog: true,\r\n\r\n// indent child console output with this string\r\nindentLog: '  |  ',\r\n\r\n// save raw output to file\r\nlogFile: null,\r\n\r\n// modify env variables\r\nenv: {},\r\n\r\n// apply an output parser (see below for values)\r\nparser: '',\r\n\r\n// how many parallel grunts to run\r\nconcurrent: <number> cpu-cores,\r\n\r\n// expect at least this many files\r\nminimumFiles: 1,\r\n\r\n// change the cwd of the gruntfile\r\ncwd: null,\r\n\r\n//--- experimental options\r\n\r\n// generate cli command\r\ndebugCli: false,\r\n\r\n// save .bat and shellscripts\r\nwriteShell: null,\r\n\r\n// don't fail\r\nexpectFail: false\r\n\r\n// pass options that will be available in the executed gruntfile with grunt.option('myOption')\r\n// NOTE: will overwrite cli options with the same name!\r\ngruntOptions: {}\r\n```\r\n\r\n#### Process result object\r\n\r\n```\r\n// status, can override\r\nfail: false,\r\noutput: 'string',\r\n\r\n// parsed data\r\nparsed: {\r\n\t'parseHelp' : {}\r\n\t..\r\n},\r\n\r\n// raw grunt.util.spawn callback arguments\r\nerror,\r\nres,\r\ncode,\r\n\r\n// used parameters\r\nsrc: 'path/to/Gruntfile.js',\r\ncwd: 'string',\r\ntasks: [],\r\noptions: {},\r\n\r\n//cleaned src\r\ngruntfile: 'Gruntfile',\r\n\r\n// timing\r\nstart: Date.now(),\r\nend: 0,\r\nduration: 0\r\n```\r\n\r\n### Parsers\r\n\r\n**parseHelp**\r\n\r\nParse `grunt -h` output\r\n\r\n* Use the `process` option to access the data.\r\n* Returns `result.parsed.parseHelp` object with task and alias names.\r\n* Requires `help` option (in a later version this will be forced)\r\n\r\n# History\r\n\r\n* 0.1.2 - Added env option\r\n* 0.1.1 - Changed error behaviour.\r\n* 0.0.4 - NPM push.\r\n* 0.0.3 - Various construction work.\r\n* 0.0.2 - Solidifying and added parsing helper to extract tasks and aliases.\r\n\r\n## Contributing\r\n\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Vagrant\r\n\r\nThere is a Vagrantfile and set of Chef cookbooks to use with [Vagrant](http://www.vagrantup.com) for easy testing on a Linux VM. It will install a node.js from package, install the dependencies and enable grunt.\r\n\r\n## License\r\n\r\nCopyright (c) 2013 Bart van der Schoor\r\n\r\nLicensed under the MIT license.\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/Bartvds/grunt-run-grunt/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-run-grunt@0.1.4",
  "_from": "grunt-run-grunt@*"
}
